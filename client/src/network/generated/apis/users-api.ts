/* tslint:disable */
/* eslint-disable */
/**
 * WHERE2B API
 * Super projekt
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ResponseTokenRefreshModel } from '../models';
// @ts-ignore
import { ResponseTokensModel } from '../models';
// @ts-ignore
import { RestaurantProfileListResponseModel } from '../models';
// @ts-ignore
import { RestaurantProfileModel } from '../models';
// @ts-ignore
import { SignInModel } from '../models';
// @ts-ignore
import { TokenRefreshModel } from '../models';
// @ts-ignore
import { UpdateUserProfileModel } from '../models';
// @ts-ignore
import { UserProfileListResponseModel } from '../models';
// @ts-ignore
import { UserProfileModel } from '../models';
/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {TokenRefreshModel} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginRefreshCreate: async (data: TokenRefreshModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('loginRefreshCreate', 'data', data)
            const localVarPath = `/users/login/refresh/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SignInModel} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginTokensCreate: async (data: SignInModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('loginTokensCreate', 'data', data)
            const localVarPath = `/users/login/tokens/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RestaurantProfileModel} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restaurantProfileCreate: async (data: RestaurantProfileModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('restaurantProfileCreate', 'data', data)
            const localVarPath = `/users/restaurant-profile/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} user A unique value identifying this restaurant profile.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restaurantProfileDelete: async (user: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'user' is not null or undefined
            assertParamExists('restaurantProfileDelete', 'user', user)
            const localVarPath = `/users/restaurant-profile/{user}/`
                .replace(`{${"user"}}`, encodeURIComponent(String(user)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restaurantProfileList: async (limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/restaurant-profile/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} user A unique value identifying this restaurant profile.
         * @param {RestaurantProfileModel} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restaurantProfilePartialUpdate: async (user: string, data: RestaurantProfileModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'user' is not null or undefined
            assertParamExists('restaurantProfilePartialUpdate', 'user', user)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('restaurantProfilePartialUpdate', 'data', data)
            const localVarPath = `/users/restaurant-profile/{user}/`
                .replace(`{${"user"}}`, encodeURIComponent(String(user)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} user A unique value identifying this restaurant profile.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restaurantProfileRead: async (user: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'user' is not null or undefined
            assertParamExists('restaurantProfileRead', 'user', user)
            const localVarPath = `/users/restaurant-profile/{user}/`
                .replace(`{${"user"}}`, encodeURIComponent(String(user)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} user A unique value identifying this restaurant profile.
         * @param {RestaurantProfileModel} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restaurantProfileUpdate: async (user: string, data: RestaurantProfileModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'user' is not null or undefined
            assertParamExists('restaurantProfileUpdate', 'user', user)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('restaurantProfileUpdate', 'data', data)
            const localVarPath = `/users/restaurant-profile/{user}/`
                .replace(`{${"user"}}`, encodeURIComponent(String(user)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UserProfileModel} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userProfileCreate: async (data: UserProfileModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('userProfileCreate', 'data', data)
            const localVarPath = `/users/user-profile/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} user A unique value identifying this user profile.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userProfileDelete: async (user: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'user' is not null or undefined
            assertParamExists('userProfileDelete', 'user', user)
            const localVarPath = `/users/user-profile/{user}/`
                .replace(`{${"user"}}`, encodeURIComponent(String(user)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userProfileList: async (limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/user-profile/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} user A unique value identifying this user profile.
         * @param {UpdateUserProfileModel} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userProfilePartialUpdate: async (user: string, data: UpdateUserProfileModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'user' is not null or undefined
            assertParamExists('userProfilePartialUpdate', 'user', user)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('userProfilePartialUpdate', 'data', data)
            const localVarPath = `/users/user-profile/{user}/`
                .replace(`{${"user"}}`, encodeURIComponent(String(user)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} user A unique value identifying this user profile.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userProfileRead: async (user: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'user' is not null or undefined
            assertParamExists('userProfileRead', 'user', user)
            const localVarPath = `/users/user-profile/{user}/`
                .replace(`{${"user"}}`, encodeURIComponent(String(user)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} user A unique value identifying this user profile.
         * @param {UpdateUserProfileModel} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userProfileUpdate: async (user: string, data: UpdateUserProfileModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'user' is not null or undefined
            assertParamExists('userProfileUpdate', 'user', user)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('userProfileUpdate', 'data', data)
            const localVarPath = `/users/user-profile/{user}/`
                .replace(`{${"user"}}`, encodeURIComponent(String(user)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {TokenRefreshModel} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginRefreshCreate(data: TokenRefreshModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseTokenRefreshModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginRefreshCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {SignInModel} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginTokensCreate(data: SignInModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseTokensModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginTokensCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {RestaurantProfileModel} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async restaurantProfileCreate(data: RestaurantProfileModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RestaurantProfileModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.restaurantProfileCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} user A unique value identifying this restaurant profile.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async restaurantProfileDelete(user: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.restaurantProfileDelete(user, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async restaurantProfileList(limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RestaurantProfileListResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.restaurantProfileList(limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} user A unique value identifying this restaurant profile.
         * @param {RestaurantProfileModel} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async restaurantProfilePartialUpdate(user: string, data: RestaurantProfileModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RestaurantProfileModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.restaurantProfilePartialUpdate(user, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} user A unique value identifying this restaurant profile.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async restaurantProfileRead(user: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RestaurantProfileModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.restaurantProfileRead(user, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} user A unique value identifying this restaurant profile.
         * @param {RestaurantProfileModel} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async restaurantProfileUpdate(user: string, data: RestaurantProfileModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RestaurantProfileModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.restaurantProfileUpdate(user, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UserProfileModel} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userProfileCreate(data: UserProfileModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserProfileModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userProfileCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} user A unique value identifying this user profile.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userProfileDelete(user: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userProfileDelete(user, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userProfileList(limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserProfileListResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userProfileList(limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} user A unique value identifying this user profile.
         * @param {UpdateUserProfileModel} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userProfilePartialUpdate(user: string, data: UpdateUserProfileModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateUserProfileModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userProfilePartialUpdate(user, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} user A unique value identifying this user profile.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userProfileRead(user: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserProfileModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userProfileRead(user, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} user A unique value identifying this user profile.
         * @param {UpdateUserProfileModel} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userProfileUpdate(user: string, data: UpdateUserProfileModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateUserProfileModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userProfileUpdate(user, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * 
         * @param {TokenRefreshModel} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginRefreshCreate(data: TokenRefreshModel, options?: any): AxiosPromise<ResponseTokenRefreshModel> {
            return localVarFp.loginRefreshCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SignInModel} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginTokensCreate(data: SignInModel, options?: any): AxiosPromise<ResponseTokensModel> {
            return localVarFp.loginTokensCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RestaurantProfileModel} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restaurantProfileCreate(data: RestaurantProfileModel, options?: any): AxiosPromise<RestaurantProfileModel> {
            return localVarFp.restaurantProfileCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} user A unique value identifying this restaurant profile.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restaurantProfileDelete(user: string, options?: any): AxiosPromise<void> {
            return localVarFp.restaurantProfileDelete(user, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restaurantProfileList(limit?: number, offset?: number, options?: any): AxiosPromise<RestaurantProfileListResponseModel> {
            return localVarFp.restaurantProfileList(limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} user A unique value identifying this restaurant profile.
         * @param {RestaurantProfileModel} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restaurantProfilePartialUpdate(user: string, data: RestaurantProfileModel, options?: any): AxiosPromise<RestaurantProfileModel> {
            return localVarFp.restaurantProfilePartialUpdate(user, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} user A unique value identifying this restaurant profile.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restaurantProfileRead(user: string, options?: any): AxiosPromise<RestaurantProfileModel> {
            return localVarFp.restaurantProfileRead(user, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} user A unique value identifying this restaurant profile.
         * @param {RestaurantProfileModel} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restaurantProfileUpdate(user: string, data: RestaurantProfileModel, options?: any): AxiosPromise<RestaurantProfileModel> {
            return localVarFp.restaurantProfileUpdate(user, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserProfileModel} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userProfileCreate(data: UserProfileModel, options?: any): AxiosPromise<UserProfileModel> {
            return localVarFp.userProfileCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} user A unique value identifying this user profile.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userProfileDelete(user: string, options?: any): AxiosPromise<void> {
            return localVarFp.userProfileDelete(user, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userProfileList(limit?: number, offset?: number, options?: any): AxiosPromise<UserProfileListResponseModel> {
            return localVarFp.userProfileList(limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} user A unique value identifying this user profile.
         * @param {UpdateUserProfileModel} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userProfilePartialUpdate(user: string, data: UpdateUserProfileModel, options?: any): AxiosPromise<UpdateUserProfileModel> {
            return localVarFp.userProfilePartialUpdate(user, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} user A unique value identifying this user profile.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userProfileRead(user: string, options?: any): AxiosPromise<UserProfileModel> {
            return localVarFp.userProfileRead(user, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} user A unique value identifying this user profile.
         * @param {UpdateUserProfileModel} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userProfileUpdate(user: string, data: UpdateUserProfileModel, options?: any): AxiosPromise<UpdateUserProfileModel> {
            return localVarFp.userProfileUpdate(user, data, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * 
     * @param {TokenRefreshModel} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public loginRefreshCreate(data: TokenRefreshModel, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).loginRefreshCreate(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SignInModel} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public loginTokensCreate(data: SignInModel, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).loginTokensCreate(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RestaurantProfileModel} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public restaurantProfileCreate(data: RestaurantProfileModel, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).restaurantProfileCreate(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} user A unique value identifying this restaurant profile.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public restaurantProfileDelete(user: string, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).restaurantProfileDelete(user, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public restaurantProfileList(limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).restaurantProfileList(limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} user A unique value identifying this restaurant profile.
     * @param {RestaurantProfileModel} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public restaurantProfilePartialUpdate(user: string, data: RestaurantProfileModel, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).restaurantProfilePartialUpdate(user, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} user A unique value identifying this restaurant profile.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public restaurantProfileRead(user: string, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).restaurantProfileRead(user, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} user A unique value identifying this restaurant profile.
     * @param {RestaurantProfileModel} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public restaurantProfileUpdate(user: string, data: RestaurantProfileModel, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).restaurantProfileUpdate(user, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserProfileModel} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public userProfileCreate(data: UserProfileModel, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).userProfileCreate(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} user A unique value identifying this user profile.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public userProfileDelete(user: string, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).userProfileDelete(user, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public userProfileList(limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).userProfileList(limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} user A unique value identifying this user profile.
     * @param {UpdateUserProfileModel} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public userProfilePartialUpdate(user: string, data: UpdateUserProfileModel, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).userProfilePartialUpdate(user, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} user A unique value identifying this user profile.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public userProfileRead(user: string, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).userProfileRead(user, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} user A unique value identifying this user profile.
     * @param {UpdateUserProfileModel} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public userProfileUpdate(user: string, data: UpdateUserProfileModel, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).userProfileUpdate(user, data, options).then((request) => request(this.axios, this.basePath));
    }
}
