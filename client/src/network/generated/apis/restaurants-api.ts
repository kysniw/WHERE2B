/* tslint:disable */
/* eslint-disable */
/**
 * WHERE2B API
 * Super projekt
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { RestaurantCategoryListResponseModel } from '../models';
// @ts-ignore
import { RestaurantListResponseModel } from '../models';
// @ts-ignore
import { RestaurantModel } from '../models';
// @ts-ignore
import { TableListResponseModel } from '../models';
// @ts-ignore
import { TableModel } from '../models';
/**
 * RestaurantsApi - axios parameter creator
 * @export
 */
export const RestaurantsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restaurantCategoriesList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/restaurants/restaurant-categories/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RestaurantModel} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restaurantCreate: async (data: RestaurantModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('restaurantCreate', 'data', data)
            const localVarPath = `/restaurants/restaurant/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this restaurant.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restaurantDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('restaurantDelete', 'id', id)
            const localVarPath = `/restaurants/restaurant/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restaurantList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/restaurants/restaurant/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this restaurant.
         * @param {RestaurantModel} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restaurantPartialUpdate: async (id: number, data: RestaurantModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('restaurantPartialUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('restaurantPartialUpdate', 'data', data)
            const localVarPath = `/restaurants/restaurant/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this restaurant.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restaurantRead: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('restaurantRead', 'id', id)
            const localVarPath = `/restaurants/restaurant/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this restaurant.
         * @param {RestaurantModel} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restaurantUpdate: async (id: number, data: RestaurantModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('restaurantUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('restaurantUpdate', 'data', data)
            const localVarPath = `/restaurants/restaurant/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {TableModel} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tableCreate: async (data: TableModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('tableCreate', 'data', data)
            const localVarPath = `/restaurants/table/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this table.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tableDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tableDelete', 'id', id)
            const localVarPath = `/restaurants/table/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tableList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/restaurants/table/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this table.
         * @param {TableModel} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablePartialUpdate: async (id: number, data: TableModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tablePartialUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('tablePartialUpdate', 'data', data)
            const localVarPath = `/restaurants/table/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this table.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tableRead: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tableRead', 'id', id)
            const localVarPath = `/restaurants/table/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this table.
         * @param {TableModel} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tableUpdate: async (id: number, data: TableModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tableUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('tableUpdate', 'data', data)
            const localVarPath = `/restaurants/table/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RestaurantsApi - functional programming interface
 * @export
 */
export const RestaurantsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RestaurantsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async restaurantCategoriesList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RestaurantCategoryListResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.restaurantCategoriesList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {RestaurantModel} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async restaurantCreate(data: RestaurantModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RestaurantModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.restaurantCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this restaurant.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async restaurantDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.restaurantDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async restaurantList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RestaurantListResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.restaurantList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this restaurant.
         * @param {RestaurantModel} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async restaurantPartialUpdate(id: number, data: RestaurantModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RestaurantModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.restaurantPartialUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this restaurant.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async restaurantRead(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RestaurantModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.restaurantRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this restaurant.
         * @param {RestaurantModel} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async restaurantUpdate(id: number, data: RestaurantModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RestaurantModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.restaurantUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {TableModel} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tableCreate(data: TableModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TableModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tableCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this table.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tableDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tableDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tableList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TableListResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tableList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this table.
         * @param {TableModel} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tablePartialUpdate(id: number, data: TableModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TableModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tablePartialUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this table.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tableRead(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TableModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tableRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this table.
         * @param {TableModel} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tableUpdate(id: number, data: TableModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TableModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tableUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RestaurantsApi - factory interface
 * @export
 */
export const RestaurantsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RestaurantsApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restaurantCategoriesList(options?: any): AxiosPromise<RestaurantCategoryListResponseModel> {
            return localVarFp.restaurantCategoriesList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RestaurantModel} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restaurantCreate(data: RestaurantModel, options?: any): AxiosPromise<RestaurantModel> {
            return localVarFp.restaurantCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this restaurant.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restaurantDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.restaurantDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restaurantList(options?: any): AxiosPromise<RestaurantListResponseModel> {
            return localVarFp.restaurantList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this restaurant.
         * @param {RestaurantModel} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restaurantPartialUpdate(id: number, data: RestaurantModel, options?: any): AxiosPromise<RestaurantModel> {
            return localVarFp.restaurantPartialUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this restaurant.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restaurantRead(id: number, options?: any): AxiosPromise<RestaurantModel> {
            return localVarFp.restaurantRead(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this restaurant.
         * @param {RestaurantModel} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restaurantUpdate(id: number, data: RestaurantModel, options?: any): AxiosPromise<RestaurantModel> {
            return localVarFp.restaurantUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TableModel} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tableCreate(data: TableModel, options?: any): AxiosPromise<TableModel> {
            return localVarFp.tableCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this table.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tableDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.tableDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tableList(options?: any): AxiosPromise<TableListResponseModel> {
            return localVarFp.tableList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this table.
         * @param {TableModel} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablePartialUpdate(id: number, data: TableModel, options?: any): AxiosPromise<TableModel> {
            return localVarFp.tablePartialUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this table.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tableRead(id: number, options?: any): AxiosPromise<TableModel> {
            return localVarFp.tableRead(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this table.
         * @param {TableModel} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tableUpdate(id: number, data: TableModel, options?: any): AxiosPromise<TableModel> {
            return localVarFp.tableUpdate(id, data, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RestaurantsApi - object-oriented interface
 * @export
 * @class RestaurantsApi
 * @extends {BaseAPI}
 */
export class RestaurantsApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RestaurantsApi
     */
    public restaurantCategoriesList(options?: AxiosRequestConfig) {
        return RestaurantsApiFp(this.configuration).restaurantCategoriesList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RestaurantModel} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RestaurantsApi
     */
    public restaurantCreate(data: RestaurantModel, options?: AxiosRequestConfig) {
        return RestaurantsApiFp(this.configuration).restaurantCreate(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this restaurant.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RestaurantsApi
     */
    public restaurantDelete(id: number, options?: AxiosRequestConfig) {
        return RestaurantsApiFp(this.configuration).restaurantDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RestaurantsApi
     */
    public restaurantList(options?: AxiosRequestConfig) {
        return RestaurantsApiFp(this.configuration).restaurantList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this restaurant.
     * @param {RestaurantModel} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RestaurantsApi
     */
    public restaurantPartialUpdate(id: number, data: RestaurantModel, options?: AxiosRequestConfig) {
        return RestaurantsApiFp(this.configuration).restaurantPartialUpdate(id, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this restaurant.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RestaurantsApi
     */
    public restaurantRead(id: number, options?: AxiosRequestConfig) {
        return RestaurantsApiFp(this.configuration).restaurantRead(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this restaurant.
     * @param {RestaurantModel} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RestaurantsApi
     */
    public restaurantUpdate(id: number, data: RestaurantModel, options?: AxiosRequestConfig) {
        return RestaurantsApiFp(this.configuration).restaurantUpdate(id, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TableModel} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RestaurantsApi
     */
    public tableCreate(data: TableModel, options?: AxiosRequestConfig) {
        return RestaurantsApiFp(this.configuration).tableCreate(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this table.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RestaurantsApi
     */
    public tableDelete(id: number, options?: AxiosRequestConfig) {
        return RestaurantsApiFp(this.configuration).tableDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RestaurantsApi
     */
    public tableList(options?: AxiosRequestConfig) {
        return RestaurantsApiFp(this.configuration).tableList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this table.
     * @param {TableModel} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RestaurantsApi
     */
    public tablePartialUpdate(id: number, data: TableModel, options?: AxiosRequestConfig) {
        return RestaurantsApiFp(this.configuration).tablePartialUpdate(id, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this table.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RestaurantsApi
     */
    public tableRead(id: number, options?: AxiosRequestConfig) {
        return RestaurantsApiFp(this.configuration).tableRead(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this table.
     * @param {TableModel} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RestaurantsApi
     */
    public tableUpdate(id: number, data: TableModel, options?: AxiosRequestConfig) {
        return RestaurantsApiFp(this.configuration).tableUpdate(id, data, options).then((request) => request(this.axios, this.basePath));
    }
}
